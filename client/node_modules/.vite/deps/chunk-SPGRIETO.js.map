{
  "version": 3,
  "sources": ["../../vuetify/src/components/VChip/VChip.tsx"],
  "sourcesContent": ["/* eslint-disable complexity */\n// Styles\nimport './VChip.sass'\n\n// Components\nimport { VAvatar } from '@/components/VAvatar'\nimport { VChipGroupSymbol } from '@/components/VChipGroup/VChipGroup'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VExpandXTransition } from '@/components/transitions'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeRouterProps, useLink } from '@/composables/router'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { IconValue } from '@/composables/icons'\nimport { useLocale } from '@/composables/locale'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { EventProp, genericComponent } from '@/util'\nimport { computed } from 'vue'\n\n// Types\nimport type { MakeSlots } from '@/util'\n\nexport type VChipSlots = MakeSlots<{\n  default: []\n  label: []\n  prepend: []\n  append: []\n}>\n\nexport const VChip = genericComponent<VChipSlots>()({\n  name: 'VChip',\n\n  directives: { Ripple },\n\n  props: {\n    activeClass: String,\n    appendAvatar: String,\n    appendIcon: IconValue,\n    closable: Boolean,\n    closeIcon: {\n      type: IconValue,\n      default: '$delete',\n    },\n    closeLabel: {\n      type: String,\n      default: '$vuetify.close',\n    },\n    draggable: Boolean,\n    filter: Boolean,\n    filterIcon: {\n      type: String,\n      default: '$complete',\n    },\n    label: Boolean,\n    link: {\n      type: Boolean,\n      default: undefined,\n    },\n    pill: Boolean,\n    prependAvatar: String,\n    prependIcon: IconValue,\n    ripple: {\n      type: Boolean,\n      default: true,\n    },\n    text: String,\n    modelValue: {\n      type: Boolean,\n      default: true,\n    },\n\n    onClick: EventProp,\n    onClickOnce: EventProp,\n\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeRoundedProps(),\n    ...makeRouterProps(),\n    ...makeSizeProps(),\n    ...makeTagProps({ tag: 'span' }),\n    ...makeThemeProps(),\n    ...makeVariantProps({ variant: 'tonal' } as const),\n  },\n\n  emits: {\n    'click:close': (e: Event) => true,\n    'update:modelValue': (value: boolean) => true,\n    'group:selected': (val: { value: boolean }) => true,\n    click: (e: MouseEvent | KeyboardEvent) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { t } = useLocale()\n    const { borderClasses } = useBorder(props)\n    const { colorClasses, colorStyles, variantClasses } = useVariant(props)\n    const { densityClasses } = useDensity(props)\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const { sizeClasses } = useSize(props)\n    const { themeClasses } = provideTheme(props)\n\n    const isActive = useProxiedModel(props, 'modelValue')\n    const group = useGroupItem(props, VChipGroupSymbol, false)\n    const link = useLink(props, attrs)\n    const isLink = computed(() => props.link !== false && link.isLink.value)\n    const isClickable = computed(() =>\n      !props.disabled &&\n      props.link !== false &&\n      (!!group || props.link || link.isClickable.value)\n    )\n\n    function onCloseClick (e: Event) {\n      isActive.value = false\n\n      emit('click:close', e)\n    }\n\n    function onClick (e: MouseEvent) {\n      emit('click', e)\n\n      if (!isClickable.value) return\n\n      link.navigate?.(e)\n      group?.toggle()\n    }\n\n    function onKeyDown (e: KeyboardEvent) {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault()\n        onClick(e as any as MouseEvent)\n      }\n    }\n\n    return () => {\n      const Tag = (link.isLink.value) ? 'a' : props.tag\n      const hasAppend = !!(slots.append || props.appendIcon || props.appendAvatar)\n      const hasClose = !!(slots.close || props.closable)\n      const hasFilter = !!(slots.filter || props.filter) && group\n      const hasPrepend = !!(slots.prepend || props.prependIcon || props.prependAvatar)\n      const hasColor = !group || group.isSelected.value\n\n      return isActive.value && (\n        <Tag\n          class={[\n            'v-chip',\n            {\n              'v-chip--disabled': props.disabled,\n              'v-chip--label': props.label,\n              'v-chip--link': isClickable.value,\n              'v-chip--filter': hasFilter,\n              'v-chip--pill': props.pill,\n            },\n            themeClasses.value,\n            borderClasses.value,\n            hasColor ? colorClasses.value : undefined,\n            densityClasses.value,\n            elevationClasses.value,\n            roundedClasses.value,\n            sizeClasses.value,\n            variantClasses.value,\n            group?.selectedClass.value,\n          ]}\n          style={[\n            hasColor ? colorStyles.value : undefined,\n          ]}\n          disabled={ props.disabled || undefined }\n          draggable={ props.draggable }\n          href={ link.href.value }\n          tabindex={ isClickable.value ? 0 : undefined }\n          onClick={ onClick }\n          onKeydown={ isClickable.value && !isLink.value && onKeyDown }\n          v-ripple={ [isClickable.value && props.ripple, null] }\n        >\n          { genOverlays(isClickable.value, 'v-chip') }\n\n          { hasFilter && (\n            <VDefaultsProvider\n              key=\"filter\"\n              defaults={{\n                VIcon: { icon: props.filterIcon },\n              }}\n            >\n              <VExpandXTransition>\n                <div\n                  class=\"v-chip__filter\"\n                  v-show={ group.isSelected.value }\n                >\n                  { slots.filter ? slots.filter() : (<VIcon />) }\n                </div>\n              </VExpandXTransition>\n            </VDefaultsProvider>\n          ) }\n\n          { hasPrepend && (\n            <VDefaultsProvider\n              key=\"prepend\"\n              defaults={{\n                VAvatar: {\n                  image: props.prependAvatar,\n                },\n                VIcon: {\n                  icon: props.prependIcon,\n                },\n              }}\n            >\n              { slots.prepend\n                ? (\n                  <div class=\"v-chip__prepend\">\n                    { slots.prepend() }\n                  </div>\n                )\n                : props.prependAvatar ? (<VAvatar start />)\n                : props.prependIcon ? (<VIcon start />)\n                : undefined\n              }\n            </VDefaultsProvider>\n          ) }\n\n          { slots.default?.({\n            isSelected: group?.isSelected.value,\n            selectedClass: group?.selectedClass.value,\n            select: group?.select,\n            toggle: group?.toggle,\n            value: group?.value.value,\n            disabled: props.disabled,\n          }) ?? props.text }\n\n          { hasAppend && (\n            <VDefaultsProvider\n              key=\"append\"\n              defaults={{\n                VAvatar: {\n                  image: props.appendAvatar,\n                },\n                VIcon: {\n                  icon: props.appendIcon,\n                },\n              }}\n            >\n              { slots.append\n                ? (\n                  <div class=\"v-chip__append\">\n                    { slots.append() }\n                  </div>\n                )\n                : props.appendAvatar ? (<VAvatar end />)\n                : props.appendIcon ? (<VIcon end />)\n                : undefined\n              }\n            </VDefaultsProvider>\n          ) }\n\n          { hasClose && (\n            <VDefaultsProvider\n              key=\"close\"\n              defaults={{\n                VIcon: {\n                  icon: props.closeIcon,\n                  size: 'x-small',\n                },\n              }}\n            >\n              <div\n                class=\"v-chip__close\"\n                aria-label={ t(props.closeLabel) }\n                onClick={ onCloseClick }\n              >\n                { slots.close ? slots.close() : (<VIcon />) }\n              </div>\n            </VDefaultsProvider>\n          ) }\n        </Tag>\n      )\n    }\n  },\n})\n\nexport type VChip = InstanceType<typeof VChip>\n"],
  "mappings": "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",
  "names": ["VChip", "genericComponent", "name", "directives", "Ripple", "props", "activeClass", "String", "appendAvatar", "appendIcon", "IconValue", "closable", "Boolean", "closeIcon", "type", "default", "closeLabel", "draggable", "filter", "filterIcon", "label", "link", "undefined", "pill", "prependAvatar", "prependIcon", "ripple", "text", "modelValue", "onClick", "EventProp", "onClickOnce", "makeBorderProps", "makeDensityProps", "makeElevationProps", "makeGroupItemProps", "makeRoundedProps", "makeRouterProps", "makeSizeProps", "makeTagProps", "tag", "makeThemeProps", "makeVariantProps", "variant", "emits", "e", "value", "val", "click", "setup", "attrs", "emit", "slots", "t", "useLocale", "borderClasses", "useBorder", "colorClasses", "colorStyles", "variantClasses", "useVariant", "densityClasses", "useDensity", "elevationClasses", "useElevation", "roundedClasses", "useRounded", "sizeClasses", "useSize", "themeClasses", "provideTheme", "isActive", "useProxiedModel", "group", "useGroupItem", "VChipGroupSymbol", "useLink", "isLink", "computed", "isClickable", "disabled", "onCloseClick", "navigate", "toggle", "onKeyDown", "key", "preventDefault", "Tag", "hasAppend", "append", "hasClose", "close", "hasFilter", "hasPrepend", "prepend", "hasColor", "isSelected", "selectedClass", "href", "genOverlays", "VIcon", "icon", "VAvatar", "image", "select", "size"]
}
